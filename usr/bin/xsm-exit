#!/usr/bin/python
#############################################################################
##                                                                         ##
##  Copyleft by WebNuLL < webnull.www at gmail dot com >                   ##
##                                                                         ##
## This program is free software; you can redistribute it and/or modify it ##
## under the terms of the GNU General Public License version 3 as          ##
## published by the Free Software Foundation; version 3.                   ##
##                                                                         ##
## This program is distributed in the hope that it will be useful, but     ##
## WITHOUT ANY WARRANTY; without even the implied warranty of              ##
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU       ##
## General Public License for more details.                                ##
##                                                                         ##
#############################################################################
#### X-Session Manager written in Python (xsm-py)
#### This code was rewrited from Bash to Python

import os, sys, re, commands, time

# Arguments passed to xsm-exit
args = sys.argv[1:]

def usage():
    print "## X-Session Manager ( Made by WebNuLL )"
    print "Available options: logout, shutdown, reboot, lock, kexec, hibernate, suspend"
    exit(os.EX_USAGE)

if len(args) == 0:
    usage()

if args[0] == "shutdown":
    print "Shutting down the machine..."
    os.system("/sbin/shutdown -h now")

elif args[0] == "reboot":
    print "Rebooting the machine..."
    os.system("/sbin/shutdown -r now")

elif args[0] == "hibernate":
    print "Hibernating the machine..."
    os.system("/usr/sbin/pm-hibernate")

elif args[0] == "suspend":
    print "Suspending the machine..."
    os.system("/usr/sbin/pm-suspend")

elif args[0] == "logout":
    if 'root' in commands.getoutput('whoami'):
        print "Root cant use logout command in this version of xsm-exit..."
        sys.exit(os.EX_NOPERM)

    # we are looking for good solution for killing only X11 session
    print "Logging out user session..."
    os.system("killall xinit -u `whoami`")

elif args[0] == "lock":
    if 'root' in commands.getoutput('whoami'):
        print "Root cant use lock command in this version of xsm-exit..."
        sys.exit(os.EX_NOPERM)

    output = commands.getoutput('ps -aux')
    
    # xscreensaver
    if 'xscreensaver' in output:
        print "Going to sleep with xscreensaver..."
        os.system("/usr/bin/xscreensaver-command -lock")
    elif 'gnome-screensaver' in output:
        print "Going to sleep with gnome-screensaver..."
        os.system("/usr/bin/gnome-screensaver-command --lock") 
    elif os.path.isfile("/usr/lib/libkscreensaver.so") and os.path.isfile("/usr/bin/qdbus"):
        print "Going to sleep with kscreensaver..."
        os.system("/usr/bin/qdbus org.freedesktop.ScreenSaver /ScreenSaver Lock")
    else:
        print "No any working screensaver application found running."

elif args[0] == "kexec":
    if args[1] == "reloadOS":
        # get kernel parametrs
        cmdline = commands.getoutput("cat /proc/cmdline")
        parseCMDLine = re.findall("BOOT_IMAGE=([A-Za-z0-9\_\.\-/]+)([ ]+)(.*)", cmdline)
        print parseCMDLine

        # if kexec was used before
        if len(parseCMDLine) == 0:
            print "[kexec] BOOT_IMAGE not found in /proc/cmdline, searching for xsm_image"

            # xsm_image=/boot/path
            findXSMImage = re.findall("xsm_image=([A-Za-z0-9\_\.\-/]+)", cmdline)
            if len(findXSMImage) == 1:
                kernel = findXSMImage[0]
                # kexec_jump_back_entry=0xffffffff
                findKexecEntry = re.findall("kexec_jump_back_entry=([a-z0-9]+)", cmdline)
                if len(findKexecEntry) == 1:
                    cmdline.replace(findKexecEntry[0][0], "")

                newCMDLine = cmdline
                print "[kexec] Found kernel="+kernel+", and cmdline="+newCMDLine
            else:
                print "[kexec] Cannot find kernel after kexec, aborting... Next time dont use kexec manually, use /usr/bin/xsm-exit kexec reloadOS instead."
                sys.exit(os.EX_OSFILE)

        # if kexec wasnt used before and BOOT_IMAGE param is still here
        elif len(parseCMDLine) == 1:
            print "[kexec] BOOT_IMAGE found in /proc/cmdline"
            if os.path.isfile(parseCMDLine[0][0]):
                kernel = parseCMDLine[0][0] # use BOOT_IMAGE
                newCMDLine = parseCMDLine[0][2]

                # Add xsm_image param for next usage of XSM (will remember kernel path)
                findXSMImage = re.findall("xsm_image=([A-Za-z0-9\_\.\-/]+)", newCMDLine)
                if len(findXSMImage) == 0:
                    newCMDLine += " xsm_image="+kernel

                print "[kexec] Found kernel="+kernel+", and cmdline="+newCMDLine
            else:
                print "[kexec] Cannot find kernel, aborting..."
                sys.exit(os.EX_OSFILE)

        print "Applying CMDLine: "+newCMDLine

        os.system("/usr/sbin/kexec "+kernel+" --command-line=\""+newCMDLine+"\"")
        sys.exit(os.EX_DATAERR)


    # GRUB 2 detection
    if os.path.isfile("/boot/grub/grub.cfg"):
        import libpybootutils.grub as bootParser
        List = bootParser.BootLoaderParser()
        List.loadFile("/boot/grub/grub.cfg")

    # For GRUB 0.97 (Legacy)
    elif os.path.isfile("/boot/grub/menu.lst"):
        import libpybootutils.grubLegacy as bootParser
        List = bootParser.BootLoaderParser()
        List.loadFile("/boot/grub/menu.lst")

    try:
        kexecOS = False
        i=0
        for OperatingSystem in List.results:
            i=i+1

            if i == int(args[1]):
                kexecOS = OperatingSystem
                break

        if kexecOS == False:
            print "[kexec] No maching operating system found for id="+str(int(args[1]))
            sys.exit(os.EX_DATAERR)

        kexecArgs = "/usr/sbin/kexec"

        # check if kernel exists - it will works here if its in /boot
        if os.path.isfile(kexecOS["kernel"]):
            kexecArgs += " "+kexecOS["kernel"]
        else:
            put,get = os.popen4("/bin/mount")
            result = get.read()

            mountPoint = re.findall(kexecOS['partition']+" on (.*) type", result)

            # mountpoint of partition is now known
            if len(mountPoint) == 1:
                kexecArgs += " "+mountPoint[0]+kexecOS["kernel"]

                # if initrd is in the same place as kernel
                if os.path.isfile(mountPoint[0]+str(kexecOS['initrd'])):
                    kexecArgs += " --initrd="+mountPoint[0]+str(kexecOS['initrd'])
                    kexecOS['initrd'] = False

                if not os.path.isfile(mountPoint[0]+kexecOS["kernel"]):
                    print "[kexec] Cannot find kernel in "+mountPoint[0]+kexecOS["kernel"]+", giving up..."
                    sys.exit(os.EX_OSFILE)

            else:
                # try to mount partition
                os.mkdir("/mnt/xsm-py-kexec")
                os.system("/bin/mount "+kexecOS['partition']+" /mnt/xsm-py-kexec") # mount partition containing kernel file

                # if initrd is in the same place as kernel
                if os.path.isfile("/mnt/xsm-py/kexec"+str(kexecOS['initrd'])):
                    kexecArgs += " --initrd=/mnt/xsm-py/kexec"+str(kexecOS['initrd'])
                    kexecOS['initrd'] = False

                if os.path.isfile("/mnt/xsm-py-kexec"+kexecOS["kernel"]):
                    kexecArgs += " /mnt/xsm-py-kexec"+kexecOS["kernel"]
                else:
                    print "[kexec] Cannot find kernel in /mnt/xsm-py-kexec"+kexecOS["kernel"]+", giving up..."
                    os.system("/bin/umount /mnt/xsm-py-kexec") # unmount
                    os.system("/bin/rmdir /mnt/xsm-py-kexec") # clean up
                    sys.exit(os.EX_OSFILE)

        if kexecOS["initrd"] != False:
            # if initrd found in /boot path
            if os.path.isfile(kexecOS["initrd"]):
                kexecArgs += " --initrd="+kexecOS["initrd"]

        kexecArgs += " --command-line=\""+kexecOS["kernel_params"].replace('\"', '\\"')+"\""

        print "[kexec] Executing: "+kexecArgs
        os.system(kexecArgs)

    except Exception as error:
        print "[kexec] There was an error making kexec request. Error message: "+str(error)
else:
    usage()

